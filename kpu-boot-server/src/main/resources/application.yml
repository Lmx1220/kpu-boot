kpu:
  druid-oracle: &druid-oracle
    validation-query: SELECT 'x' FROM DUAL
  druid-mysql: &druid-mysql
    validation-query: SELECT 'x'
  druid-sqlserver: &druid-sqlserver
    validation-query: SELECT 'x'
  mysql: &db-mysql
    driverClassName: com.mysql.cj.jdbc.Driver
    username: 'root'
    password: 'lmx123125'
    url: jdbc:mysql://127.0.0.1:3306/kpu_defaults?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useUnicode=true&useSSL=false&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true&useSSL=false

  system:
    # 登录时否验证密码有效性 （常用于开发环境快速登录）
    verifyPassword: true
    # 登录时否验证验证码有效性 （常用于开发环境快速登录）
    verifyCaptcha: true
  cache:
    type: REDIS
  redis:
    ip: 127.0.0.1
    port: 16379
    password: SbtyMveYNfLzTks7H0apCmyStPzWJqjy
    database: 0
  rabbitmq:
    enabled: false
    ip: 127.0.0.1
    port: 5672
    username: kpu
    password: kpu
  database:

    dbType: MYSQL
    # 需要初始化的数据库前缀
    initDatabasePrefix:
      - kpu_base
    # SCHEMA模式专用 当前服务的租户库前缀
    tenantDatabasePrefix: kpu_base
    # SCHEMA模式专用
    owner: ''
    multiTenantType: DATASOURCE
    # COLUMN模式专用 隔离租户的字段
    tenantIdColumn: tenant_code
    # 是否允许写入数据
    isNotWrite: false
    # 是否启用 数据权限
    isDataScope: true
    isBlockAttack: false  # 是否启用 攻击 SQL 阻断解析器
    # 是否启用 分布式事务
    isSeata: false
    p6spy: true
    id-type: HU_TOOL
    hutoolId:
      workerId: 0
      dataCenterId: 0
    cache-id:
      time-bits: 31
      worker-bits: 22
      seq-bits: 10
      epochStr: '2020-09-15'
      boost-power: 3
      padding-factor: 50
  echo:
    # 是否启用 远程数据 手动注入
    enabled: true
    # 是否启用 远程数据 注解注入
    aop-enabled: true
  authentication:
    expire: 28800               # token有效期为8小时
    refreshExpire: 86400        # 刷新token有效期为24小时
  security:
    # 是否开启URI权限校验
    enabled: false
    type: SERVICE
    caseSensitive: false
  log:
    enabled: true
    type: DB
  xss:
    enabled: true
    requestBodyEnabled: false
  file:
    storageType: MIN_IO #  FAST_DFS LOCAL MIN_IO ALI_OSS HUAWEI_OSS QINIU_OSS
    delFile: true
    publicBucket:
      - public
      - dblog-e
    local:
      storage-path: /Users/lmx/Documents/kpu/uploadfile/file/     # 文件存储路径  （ 某些版本的 window 需要改成  D:\\data\\projects\\uploadfile\\file\\  ）
      url-prefix: http://127.0.0.1/file/   # 文件访问 （部署nginx后，配置nginx的ip，并配置nginx静态代理storage-path地址的静态资源）
      inner-url-prefix: null  #  内网的url前缀
    ali:
      # 请填写自己的阿里云存储配置
      urlPrefix: "http://dblog-e.oss-cn-hangzhou.aliyuncs.com/"
      bucket: "dblog-e"
      endpoint: "oss-cn-hangzhou.aliyuncs.com"
      access-key-id: "LTAI5tNzPM9bXQJJF9v2Cm2t"
      access-key-secret: "D5xll1Jur8csMj9ABIRae7YA96AzbD"
    minIo:
      endpoint: "http://47.114.137.78:9000/"
      accessKey: "root"
      secretKey: "lmx123125"
      bucket: "kpu"
    huawei:
      urlPrefix: "dev.obs.cn-southwest-2.myhuaweicloud.com"
      endpoint: "obs.cn-southwest-2.myhuaweicloud.com"
      accessKey: "1"
      secretKey: "2"
      location: "cn-southwest-2"
      bucket: "dev"
    qiNiu:
      zone: "z0"
      accessKey: "1"
      secretKey: "2"
      bucket: "lmx_admin_cloud"
  swagger:
    license: Powered By lmx
    licenseUrl: https://github.com/lmx
    termsOfServiceUrl: https://github.com/lmx
    version: '@project.version@'
    global-operation-parameters:
      - name: token
        description: 用户身份token
        modelRef: String
        parameterType: header
        required: true
        # 默认值只是方便本地开发时，少填参数，生产环境请禁用swagger或者禁用默认参数
        defaultValue: "Bearer test"
      - name: Authorization
        description: 客户端信息
        modelRef: String
        parameterType: header
        required: true
        defaultValue: "Basic a3B1X3dlYjprcHVfd2ViX3NlY3JldA=="
      - name: tenant
        description: 租户编码
        modelRef: String
        parameterType: header
        required: false
        defaultValue: "MDAwMA=="
    docket:
      oauth:
        title: 认证模块
        base-package: cn.lmx.kpu.oauth.controller
      auth:
        title: 权限模块
        base-package: cn.lmx.kpu.authority.controller.auth
      common:
        title: 公共模块
        base-package: cn.lmx.kpu.authority.controller.common
      core:
        title: 组织模块
        base-package: cn.lmx.kpu.authority.controller.core
      tenant:
        title: 租户模块
        base-package: cn.lmx.kpu.tenant.controller
      msg:
        title: 消息服务
        base-package: cn.lmx.kpu.msg.controller;cn.lmx.kpu.sms.controller
      generator:
        title: 代码生成器服务
        base-package: cn.lmx.kpu.generator.controller
      file:
        title: 文件服务
        base-package: cn.lmx.kpu.file.controller
      activiti:
        title: 流程组件模块
        base-package: cn.lmx.kpu.activiti.controller
  captcha:
    type: ARITHMETIC
    width: 158
    height: 58
    len: 2
    charType: 2
  async:
    corePoolSize: 2
    maxPoolSize: 50
    queueCapacity: 10000
    keepAliveSeconds: 300
    threadNamePrefix: 'kpu-async-executor-'

  generator:
    outputDir: /Users/lmx/Documents/IdeaProjects/kpu/kpu-boot
    frontOutputDir: /Users/lmx/Documents/WebProjects/vue3-ts
    # 作者
    author: lmx
    # 默认项目
    projectType: BOOT
#       去除表前缀
    tablePrefix:
        - c_
    #  # 去除字段前缀
    #  fieldPrefix:
    #    - xxx_
    #  # 去除字段后缀
    #  fieldSuffix:
    #    - xxx_
    # 项目前缀
    projectPrefix: 'kpu'
    superClass: SUPER_CLASS
    # 生成方式
    genType: GEN
    packageInfoConfig: # 其他配置建议保持PackageInfoConfig中的默认值
      # 生成代码位于 src/main/java 下的基础包
      parent: 'cn.lmx.kpu'
      utilParent: 'cn.lmx.basic'
    entity-config:
      # 时间类型对应策略  ONLY_DATE: java.util  SQL_PACK:java.sql  TIME_PACK: java.time
      dateType: TIME_PACK
      # Entity类的父类
      entitySuperClass: ENTITY
      # 指定生成的主键的ID类型 (${superClass} == NONE 时，新生成的实体才生效)
      idType: INPUT
      # 数据库表字段映射到实体的命名策略
      columnNaming: underline_to_camel
      # 忽略字段（字段名）
      # ignoreColumns:
      #   - xxx
      # 【实体】 是否生成字段常量
      columnConstant: false
      # 【实体、VO】是否为链式模型
      chain: true
      # 【实体、VO】 是否为lombok模型
      lombok: true
      # 乐观锁字段名称
      versionColumnName: ''
      # 乐观锁属性名称
      versionPropertyName: ''
      # 逻辑删除字段名称
      logicDeleteColumnName: ''
      # 逻辑删除属性名称
      logicDeletePropertyName: ''
      fillColumnName:
        - xxx: INSERT
      # 格式化BaseVO文件名称
      formatBaseVoFileName: ''
      # 格式化SaveVO文件名称
      formatSaveVoFileName: ''
      # 格式化UpdateVO文件名称
      formatUpdateVoFileName: ''
      # 格式化ResultVO文件名称
      formatResultVoFileName: ''
      # 格式化 PageQuery 文件名称
      formatPageQueryFileName: ''
    mapperConfig:
      formatMapperFileName: ''
      formatXmlFileName: ''
      mapperAnnotation: false
      #    columnAnnotationTablePrefix:
      #      - xxx
      baseResultMap: true
      cache: false
      baseColumnList: true
      cacheClass: org.apache.ibatis.cache.decorators.LoggingCache
    #  serviceConfig:
    #  managerConfig:
    #  controllerConfig:
    #  webProConfig:
    fileOverrideStrategy:
      entityFileOverride: OVERRIDE
      sqlFileOverride: OVERRIDE
      mapperFileOverride: EXIST_IGNORE
      xmlFileOverride: OVERRIDE
      managerFileOverride: EXIST_IGNORE
      serviceFileOverride: EXIST_IGNORE
      controllerFileOverride: EXIST_IGNORE
      apiModelFileOverride: OVERRIDE
      langFileOverride: OVERRIDE
      indexEditTreeFileOverride: EXIST_IGNORE
      dataFileOverride: EXIST_IGNORE
    constantsPackage: # 公共枚举的完整类名，配置后自定义的枚举类才能正常 import
      # 业务服务 后台手动改动过的枚举
      FieldFill: com.baomidou.mybatisplus.annotation.FieldFill
      SuperClassEnum: cn.lmx.kpu.generator.enumeration.SuperClassEnum
      EntitySuperClassEnum: cn.lmx.kpu.generator.enumeration.EntitySuperClassEnum
      # common 常量
      EchoDictType: cn.lmx.kpu.model.constant.EchoDictType
      EchoApi: cn.lmx.kpu.model.constant.EchoApi
      # common 公共枚举
      HttpMethod: cn.lmx.kpu.model.enumeration.HttpMethod
      BooleanEnum: cn.lmx.kpu.model.enumeration.BooleanEnum
      StateEnum: cn.lmx.kpu.model.enumeration.StateEnum
      RoleCategoryEnum: cn.lmx.kpu.model.enumeration.base.RoleCategoryEnum
      OrgTypeEnum: cn.lmx.kpu.model.enumeration.base.OrgTypeEnum
      FileType: cn.lmx.kpu.model.enumeration.base.FileType
      DateType: cn.lmx.kpu.model.enumeration.base.DateType
      TenantConnectTypeEnum: cn.lmx.kpu.model.enumeration.system.TenantConnectTypeEnum


knife4j:
  enable: true
  setting:
    enableReloadCacheParameter: true
    enableVersion: true
    enableDynamicParameter: true
    enableFooter: false
    enableFooterCustom: true
    footerCustomContent: Apache License 2.0 | Copyright  2020 [kpu-cloud](https://github.com/lmx)

setting:
  path:
    uploadPath: /data/projects/uploadfile/temp/


server:
  shutdown: GRACEFUL
  servlet:
    encoding:
      enabled: true
      charset: UTF-8
      force: true
  port: 8760
  undertow:
    threads:
      io: 8 # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      worker: 120  # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
    buffer-size: 2048  # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理 , 每块buffer的空间大小,越小的空间被利用越充分
    direct-buffers: true  # 是否分配的直接内存

dozer:
  mappingFiles:
    - classpath*:dozer/*.dozer.xml

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
      enabled: true

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: '@project.artifactId@'
  profiles:
    active: dev
  mvc:
    pathmatch:
      # 升级springboot2.6.6后临时处理，防止swagger报错
      matching-strategy: ANT_PATH_MATCHER
  lifecycle:
    # 优雅停机宽限期时间
    timeout-per-shutdown-phase: 30s
  freemarker:
    suffix: .ftl
    cache: false
    charset: UTF-8
    contentType: text/html
    requestContextAttribute: ctx
    templateEncoding: UTF-8
    templateLoaderPath: classpath:/
    settings:
      defaultEncoding: UTF-8
      url_escaping_charset: UTF-8
      locale: zh_CN
  servlet:
    multipart:
      max-file-size: 512MB      # Max file size，默认1M
      max-request-size: 512MB   # Max request size，默认10M
  rabbitmq:
    enabled: ${kpu.rabbitmq.enabled}
    host: ${kpu.rabbitmq.ip}
    port: ${kpu.rabbitmq.port}
    username: ${kpu.rabbitmq.username}
    password: ${kpu.rabbitmq.password}
    listener:
      type: direct # simple direct
  redis:
    host: ${kpu.redis.ip}
    password: ${kpu.redis.password}
    port: ${kpu.redis.port}
    database: ${kpu.redis.database}
    lettuce:
      pool:
        max-idle: 10
        min-idle: 10
        max-active: 100
  cache:
    type: GENERIC
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
  datasource:
    dynamic:
      enabled: true
      # 从这里开始(dynamic)，中间的这段配置用于 kpu.database.multiTenantType == DATASOURCE 时
      p6spy: ${kpu.database.p6spy:false}
      seata: ${kpu.database.isSeata:false}
      primary: "0"
      datasource:
        "0": # 只配置了默认数据库  kpu_defaults
          <<: *db-mysql
      druid:
        <<: *druid-mysql
        initialSize: 10
        minIdle: 10
        maxActive: 200
        max-wait: 60000
        pool-prepared-statements: true
        max-pool-prepared-statement-per-connection-size: 20
        test-on-borrow: false
        test-on-return: false
        test-while-idle: true
        time-between-eviction-runs-millis: 60000  #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        min-evictable-idle-time-millis: 300000    #配置一个连接在池中最小生存的时间，单位是毫秒
        filters: stat,wall
        wall:
          enabled: true
          strictSyntaxCheck: false
          commentAllow: true
          multiStatementAllow: true
          noneBaseStatementAllow: true
    druid:
      enable: true
      filter:
        slf4j:
          enabled: false     # 使用slf4j打印可执行日志时，改成true
          statement-executable-sql-log-enable: true
      # 从这里结束(druid)，中间的这段配置用于 kpu.database.multiTenantType != DATASOURCE 时

      # 以下的2段配置，同时适用于所有模式
      web-stat-filter:  # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
        enabled: true
        url-pattern: /*
        exclusions: "*.js , *.gif ,*.jpg ,*.png ,*.css ,*.ico , /druid/*"
        session-stat-max-count: 1000
        profile-enable: true
        session-stat-enable: false
      stat-view-servlet:  #展示Druid的统计信息,StatViewServlet的用途包括：1.提供监控信息展示的html页面2.提供监控信息的JSON API
        enabled: true
        url-pattern: /druid/*   #根据配置中的url-pattern来访问内置监控页面，如果是上面的配置，内置监控页面的首页是/druid/index.html例如：http://127.0.0.1:9000/druid/index.html
        reset-enable: true    #允许清空统计数据
        login-username: kpu
        login-password: kpu


# database.yml
mybatis-plus:
  mapper-locations:
    - classpath*:mapper_**/**/*Mapper.xml
  typeAliasesPackage: cn.lmx.kpu.*.entity;cn.lmx.basic.database.mybatis.typehandler
  typeEnumsPackage: cn.lmx.kpu.*.enumeration
  global-config:
    db-config:
      id-type: INPUT
      insert-strategy: NOT_NULL
      update-strategy: NOT_NULL
      where-strategy: NOT_EMPTY
  configuration:
    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: true
    cache-enabled: false
    #配置JdbcTypeForNull, oracle数据库必须配置
    jdbc-type-for-null: 'null'
    default-enum-type-handler: cn.lmx.basic.database.mybatis.handlers.MybatisEnumTypeHandler

# 用于/actuator/info
info:
  name: '@project.name@'
  description: '@project.description@'
  version: '@project.version@'
  spring-boot-version: '@spring.boot.version@'

logging:
  file:
    path: '@logging.file.path@'
    name: ${logging.file.path}/${spring.application.name}/root.log
  config: classpath:logback-spring.xml
  level:
    druid.sql.Statement: debug
